/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sim.view;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import sim.scheme.IScheme;
import sim.util.Candidate;
import sim.util.Mapping;
import sim.util.Ranking;
import sim.voter.CumulativeVoter;
import sim.voter.IVoter;

/**
 *
 * @author drew
 */
public class Main extends javax.swing.JFrame {

    private VoterModel v;
    private ResultsModel rMod;
    
    
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        numCandTF = new javax.swing.JTextField();
        numVotersTF = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        votePrefsTable = new javax.swing.JTable();
        runBt = new javax.swing.JButton();
        updateBt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Voting Simulator");

        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(resultsTable);

        jLabel1.setText("Number of Candidates:");

        jLabel2.setText("Number of Voters:");

        numCandTF.setText("3");

        numVotersTF.setText("10");

        votePrefsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(votePrefsTable);

        runBt.setText("Generate/Run");
        runBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                runBtMouseClicked(evt);
            }
        });

        updateBt.setText("Update/Run");
        updateBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateBtMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(numVotersTF, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                            .addComponent(numCandTF))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runBt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateBt)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(numCandTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(numVotersTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(runBt)
                            .addComponent(updateBt))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void runBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runBtMouseClicked
        // TODO add your handling code here:
        
        int numVoters = Integer.parseInt(numVotersTF.getText());
        int numCans = Integer.parseInt(numCandTF.getText());
        
        List<Candidate> cans = new ArrayList<>();
        
        // First generate the candidates
        for (int i = 0; i < numCans; i++)
        {
            cans.add(new Candidate("" + i));
        }
        
        
        
        // Second generate the preferences for all of the voters
        List<Ranking<Candidate> > rankings = new ArrayList<>();
        for (int i = 0; i < numVoters; i++)
        {
            List<Candidate> alts = new ArrayList<>(cans);
            Collections.shuffle(alts);
            Ranking<Candidate> ordering = new Ranking<>();

            //System.out.print("Ranking: ");
            for (Candidate c : alts) {
                ordering.pushCandidate(c);
                //      System.out.print(c.getID() + ", ");
            }
            // reverse so that I printed it out correctly...
            ordering.reverseRanks();
            rankings.add(ordering);
        }
        
        v = new VoterModel();
        v.updateData(cans, rankings);
        
        votePrefsTable.setModel(v);
        
        
        
        // so now I have to make all of the combos  and run them
        List<String> schemeName = new ArrayList<>();
        List< Ranking<Candidate> > results = new ArrayList<>();
        int k = 10;// the value for cumulative voters... could add a tf to frame...
        for (Mapping c : Mapping.values())
        {
            
            Map<IScheme, List<IVoter> > curScheme = c.buildVoting(rankings);
            
            IScheme s = curScheme.keySet().iterator().next();
            List<IVoter> votersL = curScheme.values().iterator().next();
            
            if (c == Mapping.Cumulative)
            {
                for(IVoter iv : votersL)
                {
                    CumulativeVoter cv = (CumulativeVoter)iv;
                    cv.setK(k);
                }
            }
            
            s.setup(new HashSet<>(cans), new HashSet<>(votersL));
            results.add(s.vote());
            schemeName.add(c.toString());
            // clear the candidates
            
            for (Candidate can : cans)
            {
                can.clearVotes();
            }
            
            
        }
        
        
        
        
        rMod = new ResultsModel();
        rMod.updateData(schemeName, results, numCans);
        resultsTable.setModel(rMod);
        
        
        
        
        
        
        
    }//GEN-LAST:event_runBtMouseClicked

    private void updateBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateBtMouseClicked
        // TODO add your handling code here:
        
        if (v != null)
        {
            
            int numVoters = Integer.parseInt(numVotersTF.getText());
        int numCans = Integer.parseInt(numCandTF.getText());
        List<Candidate> cans = v.getCans();
        List<Ranking<Candidate> > rankings = v.getRankings();
        
        
        
        
        // so now I have to make all of the combos  and run them
        List<String> schemeName = new ArrayList<>();
        List< Ranking<Candidate> > results = new ArrayList<>();
        int k = 10;// the value for cumulative voters... could add a tf to frame...
        for (Mapping c : Mapping.values())
        {
            
            Map<IScheme, List<IVoter> > curScheme = c.buildVoting(rankings);
            
            IScheme s = curScheme.keySet().iterator().next();
            List<IVoter> votersL = curScheme.values().iterator().next();
            
            if (c == Mapping.Cumulative)
            {
                for(IVoter iv : votersL)
                {
                    CumulativeVoter cv = (CumulativeVoter)iv;
                    cv.setK(k);
                }
            }
            
            s.setup(new HashSet<>(cans), new HashSet<>(votersL));
            results.add(s.vote());
            schemeName.add(c.toString());
            // clear the candidates
            /*
            if (c == Mapping.IRV)
            {
                for (Candidate can : cans)
                {
                    System.out.println(can.getID() + " " + can.getTotalVotesCast());
                }
            }
            */
            for (Candidate can : cans)
            {
                can.clearVotes();
            }
            
            
        }
        
        
        
        
        rMod = new ResultsModel();
        rMod.updateData(schemeName, results, numCans);
        resultsTable.setModel(rMod);
        }
        
    }//GEN-LAST:event_updateBtMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField numCandTF;
    private javax.swing.JTextField numVotersTF;
    private javax.swing.JTable resultsTable;
    private javax.swing.JButton runBt;
    private javax.swing.JButton updateBt;
    private javax.swing.JTable votePrefsTable;
    // End of variables declaration//GEN-END:variables
}
